@{
    ViewBag.Title = "SARIF Validator";
}

<link href="~/Content/Home.css" rel="stylesheet" />
<link href="~/Scripts/jqueryui/themes/redmond/jquery-ui.min.css" rel="stylesheet" />
<link href="~/Scripts/jqueryui/themes/redmond/theme.min.css" rel="stylesheet" />
<link href="~/Scripts/jqueryui/jquery-ui.structure.css" rel="stylesheet" />
<link href="~/Scripts/jqueryui/jquery-ui-1.12.icon-font.min.css" rel="stylesheet" />
<link href="~/Content/jquery.multiselect.css" rel="stylesheet" />
<link href="~/Content/Loader.css" rel="stylesheet" />
<link href="~/Content/Validator.css" rel="stylesheet" />

<section id="dropSection" class="content-section gray-section">
    <div id="pageTitle" role="heading" aria-level="1" class="content-section-title">@ViewBag.Title</div>

    <form id="dropForm" role="region" aria-dropeffect="execute" aria-label="Click to browse for your log file" tabindex="0" method="post" action="@Url.Action("ValidateFilesAsync")" class="drop-area">
        <input id="fileInput" name="postedFiles" type="file" style="display: none;">
        <div class="drop-area-text drop-area-text-input">Drop your SARIF file here or click to browse</div>
        <div class="drop-area-text drop-area-text-busy">
            <div class="drop-area-busy">
                <div id="looper">
                    <div class="loader">Loading...</div>
                </div>
                <div id="busyText">
                    Validating&hellip;
                </div>
            </div>
        </div>
        <div class="drop-area-text drop-area-text-complete">Validation complete!</div>
        <div class="drop-area-text drop-area-text-error">Error</div>
    </form>
</section>

<section id="validatorSection" role="region" aria-labelledby="pageTitle" class="content-section gray-section">
    <div id="validatorContainer">
        <div id="validatorToolbar" data-disabled>
            <div id="leftToolbarGroup">
                <select id="ruleList" role="combobox" aria-label="Rule list" multiple size="1" disabled>
                    <option value=""></option>
                </select>
                <button id="prevResultButton" aria-label="Previous result" title="Previous result" class="toolbar-button" disabled>
                    <span class="ui-icon ui-icon-caret-1-n">icon</span>
                </button>
                <div id="resultPosition">
                    <div id="resultPositionCurrent" aria-label="Result number">0</div>
                    <div id="resultPositionSeparator" aria-label="of">/</div>
                    <div id="resultPositionCount">0</div>
                </div>
                <button id="nextResultButton" aria-label="Next result" title="Next result" class="toolbar-button" disabled>
                    <span class="ui-icon ui-icon-caret-1-s">icon</span>
                </button>
                <div id="ruleDescription"></div>
            </div>
            <div id="rightToolbarGroup">
                <button id="downloadLogButton" aria-label="Download log file" title="Download log file" class="toolbar-button" disabled>
                    <span class="ui-icon ui-icon-download">icon</span>
                </button>
                <button id="revalidateButton" aria-label="Re-validate log file" title="Re-validate log file" class="toolbar-button" disabled>
                    <span class="ui-icon ui-icon-arrowrefresh-1-e">icon</span>
                </button>
                <button id="utilitiesButton" aria-label="Utilities menu" title="Utilities menu" class="toolbar-button" disabled>
                    <span class="ui-icon ui-icon-gear">icon</span>
                </button>
            </div>
            <ul id="utilitiesMenu">
                <li id="downloadvalidationLog"><div>Download validation results</div></li>
                <li>
                    <div>Editor color themes</div>
                    <ul id="utilitiesMenuThemesFlyout">
                        <li class="ui-widget-header"><div>Light</div></li>
                        <li data-value="ace/theme/chrome"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Chrome</div></li>
                        <li data-value="ace/theme/clouds"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Clouds</div></li>
                        <li data-value="ace/theme/crimson_editor"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Crimson Editor</div></li>
                        <li data-value="ace/theme/dawn"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Dawn</div></li>
                        <li data-value="ace/theme/dreamweaver"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Dreamweaver</div></li>
                        <li data-value="ace/theme/eclipse"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Eclipse</div></li>
                        <li data-value="ace/theme/github"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>GitHub</div></li>
                        <li data-value="ace/theme/iplastic"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>IPlastic</div></li>
                        <li data-value="ace/theme/katzenmilch"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>KatzenMilch</div></li>
                        <li data-value="ace/theme/kuroir"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Kuroir</div></li>
                        <li data-value="ace/theme/solarized_light"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Solarized Light</div></li>
                        <li data-value="ace/theme/sqlserver"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>SQL Server</div></li>
                        <li data-value="ace/theme/textmate"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>TextMate</div></li>
                        <li data-value="ace/theme/tomorrow"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Tomorrow</div></li>
                        <li data-value="ace/theme/xcode"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>XCode</div></li>
                        <li class="ui-widget-header"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Dark</div></li>
                        <li data-value="ace/theme/ambiance"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Ambiance</div></li>
                        <li data-value="ace/theme/chaos"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Chaos</div></li>
                        <li data-value="ace/theme/clouds_midnight"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Clouds Midnight</div></li>
                        <li data-value="ace/theme/cobalt"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Cobalt</div></li>
                        <li data-value="ace/theme/dracula"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Dracula</div></li>
                        <li data-value="ace/theme/gob"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Green on Black</div></li>
                        <li data-value="ace/theme/gruvbox"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Gruvbox</div></li>
                        <li data-value="ace/theme/idle_fingers"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>idle Fingers</div></li>
                        <li data-value="ace/theme/kr_theme"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>krTheme</div></li>
                        <li data-value="ace/theme/merbivore"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Merbivore</div></li>
                        <li data-value="ace/theme/merbivore_soft"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Merbivore Soft</div></li>
                        <li data-value="ace/theme/mono_industrial"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Mono Industrial</div></li>
                        <li data-value="ace/theme/monokai"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Monokai</div></li>
                        <li data-value="ace/theme/pastel_on_dark"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Pastel on dark</div></li>
                        <li data-value="ace/theme/solarized_dark"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Solarized Dark</div></li>
                        <li data-value="ace/theme/terminal"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Terminal</div></li>
                        <li data-value="ace/theme/tomorrow_night"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Tomorrow Night</div></li>
                        <li data-value="ace/theme/tomorrow_night_blue"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Tomorrow Night Blue</div></li>
                        <li data-value="ace/theme/tomorrow_night_bright"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Tomorrow Night Bright</div></li>
                        <li data-value="ace/theme/tomorrow_night_eighties"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Tomorrow Night 80s</div></li>
                        <li data-value="ace/theme/twilight"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Twilight</div></li>
                        <li data-value="ace/theme/vibrant_ink"><div><span class="ui-icon ui-icon-check menu-check-hidden"></span>Vibrant Ink</div></li>
                    </ul>
                </li>
            </ul>
        </div>
        <div id="editor" role="textbox" aria-label="Log file editor"></div>
        <div id="validatorFooter">
            <div id="resultDetails"></div>
        </div>
    </div>
</section>

<!-- This hidden hyperlink is used by the Download button -->
<a id="downloadLink" style="display: none;">Download</a>

@section Scripts {
    <script src="~/Scripts/ace/ace.js"></script>
    <script src="~/Scripts/jqueryui/jquery-ui.min.js"></script>
    <script src="~/Scripts/jquery.multiselect.min.js"></script>
    <script type="text/javascript">
        $(function () {
            var fileName = "";
            var targetLogText = null;
            var validationLog = null;

            var currentRules = [];
            var currentResultLocations = [];
            var currentResultLocationIndex = -1;

            var editor = null;

            var ruleDescriptionTemplate = `<b><a href="{HELPURL}" target="_blank">{RULEID}</a>:</b> {RULEDESC}`;
            var resultDetailTemplate = `<b><a href="{HELPURL}" target="_blank">{RULEID}</a>:</b> {RESULTMSG}`;

            var $toolbar = $("#validatorToolbar");
            var $ruleList = $("#ruleList").multiselect({
                minWidth: 300,
                header: "<input type='checkbox' id='ruleListSelectAll' checked class='ui-multiselect-header-item' /><label for='ruleListSelectAll'></label>",
                noneSelectedText: "Select rules",
                selectedText: "# rule(s) selected",
                click: function (e) {
                    var target = e.currentTarget;

                    if (!$(target).hasClass("ui-multiselect-header-item")) {
                        if (!target.checked) {
                            ruleListSelectAll.checked = false;
                        }
                        else {
                            var checked = $(this).multiselect("getChecked");
                            ruleListSelectAll.checked = checked.length == rulesCount;
                        }
                    }
                },
                beforeclose: function () {
                    currentRules = [];
                    currentResultLocations = [];
                    var count = 0;

                    $.each($(this).multiselect("getChecked"), function (index, option) {
                        // The "select all" checkbox will be included if it's checked, so skip it
                        if (!$(option).hasClass("ui-multiselect-header-item")) {
                            currentRules.push(option.value);
                        }
                    });

                    clearLineMarkers();

                    if (currentRules.length > 0) {
                        $.each(currentRules, function (index, ruleId) {
                            $.each(rulesDictionary[ruleId].results, function (index, result) {
                                currentResultLocations.push({ ruleId: ruleId, result: result });
                                setLineMarker(result.line);
                                count++;
                            });
                        });

                        // Sort the result by line number
                        currentResultLocations.sort(function (r1, r2) {
                            return r1.result.line - r2.result.line;
                        });

                        setResultPositionText(1, count);
                        currentResultLocationIndex = 0;
                        var firstResultLocation = currentResultLocations[0]
                        setRuleDescription(firstResultLocation.ruleId);
                        setResultLocationDetails(firstResultLocation)

                        setTimeout(function () {
                            editor.gotoLine(firstResultLocation.result.line, 0, true);
                        }, 0);
                    }
                }
            });
            $("#ruleListSelectAll")
                .on("click", function (e) {
                    var checked = e.target.checked;

                    if (checked) {
                        $ruleList.multiselect("checkAll");
                    }
                    else {
                        $ruleList.multiselect("uncheckAll");
                    }
                });
            var $ruleDescription = $("#ruleDescription");
            var $resultPositionCurrentText = $("#resultPositionCurrent");
            var $resultPositionCountText = $("#resultPositionCount");
            var $prevResultButton = $("#prevResultButton").button();
            var $nextResultButton = $("#nextResultButton").button();
            var $downloadButton = $("#downloadLogButton").button();
            var $revalidateButton = $("#revalidateButton").button();
            var $utilitiesButton = $("#utilitiesButton").button();
            var $utilitiesMenu = $("#utilitiesMenu").menu({
                items: "> :not(.ui-widget-header)"
            }).hide();
            var $resultDetails = $("#resultDetails");

            $("#downloadvalidationLog").on("click", function () {
                // BUGBUG: issue #83 calls for the file key to be the uploaded filename
                // For now, find the file with the sarif content type
                $.each(validationLog.runs[0].files, function (key, file) {
                    if (file.mimeType == "application/sarif-json") {
                        file.contents = {
                            text: targetLogText
                        }
                        return false; // Break
                    }
                });
                var text = JSON.stringify(validationLog, null, " ");
                var index = fileName.lastIndexOf(".");
                var extension = fileName.substring(index + 1);
                var outputFileName = fileName.substring(0, index) + ".validation." + extension;
                saveTextAsFile(text, outputFileName);
            });

            var theme = getCookie("editorTheme");
            theme = theme ? theme : "ace/theme/sqlserver";
            $("#utilitiesMenuThemesFlyout li[data-value='" + theme + "']").addClass("selected-theme");

            // Rules dictionary: key = rule ID, value = { results[{ line, message }] }
            var rulesDictionary = {};
            var rulesCount = 0;

            function addResult(rule, result) {
                if (!rulesDictionary[rule.id]) {
                    rulesDictionary[rule.id] = {
                        // We could just have the results array be the value, but
                        // it reads more clearly as an object with a results property
                        results: []
                    };
                    rulesCount++;
                }

                // Get the messageString specified by this result
                var message = rule.messageStrings[result.message.messageId];

                // Replace tokens in the messageString with this result's arguments
                $.each(result.message.arguments, function (index, arg) {
                    message = message.replace("{" + index + "}", arg);
                });

                // Add each location for this result
                $.each(result.locations, function (index, location) {
                    var startLine = location.physicalLocation.region.startLine;
                    rulesDictionary[result.ruleId].results.push({
                        line: startLine,
                        message: message
                    });
                });
            }

            // Creates a SARIF log object from JSON, then processes rules and results
            function processResults(sarif) {
                rulesDictionary = {};
                validationLog= JSON.parse(sarif);
                var hasResults = false;
                var run = validationLog.runs[0];

                if (run.results.length > 0) {
                    hasResults = true;

                    if (run.resources && run.resources.rules) {
                        $.each(run.results, function (index, result) {
                            addResult(run.resources.rules[result.ruleId], result);
                        });

                        // Now we know how many result locations we have for each rule, so populate the rules dropdown
                        var options = [];
                        for (var key in rulesDictionary) {
                            options.push("<option value='" + key + "'>" + key + " (" + rulesDictionary[key].results.length + ")</option>");
                        }

                        // Clear the dropdown, then add the rules and trigger a close event
                        clearRuleList();
                        $ruleList.append(options.join("")).multiselect("refresh").multiselect("checkAll").multiselect("close");
                    }
                };

                if (!hasResults) {
                    rulesDictionary = {};
                    clearRuleList();
                    setResultPositionText(0, 0);
                    setToolbarEnabled(false);
                    clearLineMarkers();
                    currentResultLocationIndex = -1;

                    setTimeout(function () {
                        // Push this to another thread to allow the above settings to take effect
                        alert("No errors were found during validation!");
                    }, 0);
                }
            }

            // Downloads the complete text from the editor
            function saveTextAsFile(text, fileName) {
                var textToWrite = text;
                var textFileAsBlob = new Blob([textToWrite], { type: "text/json" });

                var downloadLink = $("#downloadLink")[0];
                downloadLink.download = fileName;
                downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
                downloadLink.click();

                window.URL.revokeObjectURL(textFileAsBlob);
            }

            // Sets a line marker in the editor
            function setLineMarker(line) {
                var range = new ace.Range(line - 1, 0, line - 1, Infinity);
                range.start = editor.session.doc.createAnchor(range.start);
                range.end = editor.session.doc.createAnchor(range.end);
                range.id = editor.session.addMarker(range, "sarif-error", "text", false);
            }

            // Clears all line markers in the editor
            function clearLineMarkers() {
                var markers = editor.session.getMarkers();
                $.each(markers, function (id) {
                    editor.session.removeMarker(id);
                });
            }

            function isSarifFile(fileName) {
                var ext = fileName.substr(fileName.lastIndexOf(".") + 1).toLowerCase();
                return ext == "sarif";
            }

            function setUpEditor(file) {
                return new Promise(function (resolve, reject) {
                    var reader = new FileReader();
                    reader.onload = function () {
                        editor = ace.edit("editor", {
                            mode: "ace/mode/json",
                            theme: $("#utilitiesMenuThemesFlyout li.selected-theme").attr("data-value"),
                            selectionStyle: "text",
                            showPrintMargin: false
                        });

                        // Get the target file text, excluding the header segment
                        targetLogText = atob(reader.result.substring(reader.result.indexOf(',') + 1));
                        editor.setValue(targetLogText);
                        editor.selection.clearSelection();

                        // Enable controls
                        setToolbarEnabled(true);
                        resolve();
                    };
                    reader.readAsDataURL(file);
                    fileName = file.name;
                });
            }

            function resetFileInput() {
                $fileInput.val(null);
            }

            function resetEditor() {
                if (editor) {
                    editor.setValue("");
                }

                clearRuleList();
                setToolbarEnabled(false);
                setResultPositionText(0, 0);
            }

            function setToolbarEnabled(enable) {
                var verb;
                var selector = "";

                if (enable) {
                    verb = "enable";
                    selector = ":disabled";
                    $toolbar.removeAttr("data-disabled");
                }
                else {
                    verb = "disable";
                    $toolbar.attr("data-disabled");
                }

                $("#validatorToolbar .toolbar-button" + selector).each(function (index, button) {
                    $(button).button(verb);
                });
                $ruleList.multiselect(verb);
            }

            function clearRuleList() {
                $("#ruleList option").each(function (index, option) {
                    $(option).remove();
                })
                $ruleList.multiselect("refresh");
                setRuleDescription();
            }

            function setResultPositionText(current, count) {
                $resultPositionCurrentText.text(current);

                if (typeof count != "undefined") {
                    $resultPositionCountText.text(count);
                }
            }

            function submitValidationRequest(file) {
                // Prevent duplicate submissions
                if ($dropForm.hasClass("is-busy")) {
                    return false;
                }

                resetEditor();

                // Confirm if the file is > 20 MB
                if (file.size > (20 * 1024 * 1024)) {
                    if (!confirm("The file you have selected is large, and validating this file could take a long time. Do you want to continue?")) {
                        resetFileInput();
                        return;
                    }
                }

                $dropForm.addClass("is-busy").removeClass("is-complete").removeClass("is-error");

                var formData = new FormData();
                formData.append($fileInput.attr("name"), file);

                $.ajax({
                    url: $dropForm.attr("action"),
                    type: $dropForm.attr("method"),
                    data: formData,
                    dataType: "json",
                    cache: false,
                    contentType: false,
                    processData: false,
                    complete: function () {
                        resetFileInput();
                        $dropForm.removeClass("is-busy");
                    },
                    success: function (data) {
                        $dropForm.addClass("is-complete");
                        setTimeout(function () {
                            $dropForm.removeClass("is-complete");
                        }, 5000);
                        setUpEditor(file)
                            .then(function () {
                                processResults(data.LogContents);
                            });
                    },
                    error: function (xmlhttprequest, textstatus, message) {
                        $dropForm.addClass("is-error");
                        var error = textstatus == "timeout" ?
                            "The validation request timed out." :
                            "An unknown error occurred.";
                        alert(error);
                    }
                });
            }

            function setRuleDescription(ruleId) {
                $ruleDescription.empty();

                if (ruleId) {
                    var rule = validationLog.runs[0].resources.rules[ruleId];
                    var html = ruleDescriptionTemplate
                        .replace("{RULEID}", rule.id)
                        .replace("{RULEDESC}", rule.fullDescription.text ? rule.fullDescription.text : rule.shortDescription.text)
                        .replace("{HELPURL}", rule.helpUri);
                    $ruleDescription.html(html);
                }
            }

            function setResultLocationDetails(resultLocation) {
                $resultDetails.empty();

                if (resultLocation) {
                    var rule = validationLog.runs[0].resources.rules[resultLocation.ruleId];
                    var html = resultDetailTemplate
                        .replace("{RULEID}", rule.id)
                        .replace("{RESULTMSG}", resultLocation.result.message)
                        .replace("{HELPURL}", rule.helpUri);
                    $resultDetails.html(html);
                }
            }

            function changeCurrentResultLocation() {
                setResultPositionText(currentResultLocationIndex + 1);
                var resultLocation = currentResultLocations[currentResultLocationIndex];
                setRuleDescription(resultLocation.ruleId);
                setResultLocationDetails(resultLocation);
                editor.gotoLine(resultLocation.result.line, 0, true);
            }

            function goToPreviousResultLocation() {
                if (currentResultLocationIndex > -1) {
                    if (currentResultLocationIndex > 0) {
                        currentResultLocationIndex--;
                    }
                    else {
                        currentResultLocationIndex = currentResultLocations.length - 1;
                    }

                    changeCurrentResultLocation();
                }
            }

            function goToNextResultLocation() {
                if (currentResultLocationIndex > -1) {
                    if (currentResultLocationIndex < currentResultLocations.length - 1) {
                        currentResultLocationIndex++;
                    }
                    else {
                        currentResultLocationIndex = 0;
                    }

                    changeCurrentResultLocation();
                }
            }

            $(document).on("keyup", function (e) {
                if (e.key == "F7") {
                    goToPreviousResultLocation();
                }
                else if (e.key == "F8") {
                    goToNextResultLocation();
                }
            });

            $prevResultButton.on("click", function () {
                goToPreviousResultLocation();
            });

            $nextResultButton.on("click", function () {
                goToNextResultLocation();
            });

            $downloadButton.on("click", function () {
                saveTextAsFile(editor.getValue(), fileName);
            });

            $revalidateButton.on("click", function () {
                // Disable controls
                setToolbarEnabled(false);
                $dropForm.addClass("is-busy").removeClass("is-complete").removeClass("is-error");

                $.ajax({
                    url: "@Url.Action("ValidateJsonAsync")",
                    type: "POST",
                    data: JSON.stringify({ json: editor.getValue() }),
                    dataType: "json",
                    cache: false,
                    contentType: "application/json",
                    processData: false,
                    complete: function () {
                        // Enable controls
                        setToolbarEnabled(true);
                        $dropForm.removeClass("is-busy");
                    },
                    success: function (data) {
                        $dropForm.addClass("is-complete");
                        setTimeout(function () {
                            $dropForm.removeClass("is-complete");
                        }, 5000);
                        processResults(data.LogContents);
                    },
                    error: function (xmlhttprequest, textstatus, message) {
                        $dropForm.addClass("is-error");
                        setTimeout(function () {
                            $dropForm.removeClass("is-error");
                        }, 5000);
                        var error = textstatus == "timeout" ?
                            "The re-validation request timed out." :
                            "An unknown error occurred.";
                        alert(error);
                    }
                });
            });

            $utilitiesButton.button().on("click", function () {
                $utilitiesMenu.show().position({
                    my: "right top",
                    at: "left bottom",
                    of: this,
                    collision: "flip flip",
                    within: "#pageContainer"
                });

                $(document).on("click", function () {
                    $utilitiesMenu.hide();
                }).on("keyup", function (e) {
                    if (e.key == "Escape") {
                        $utilitiesMenu.hide();
                    }
                });

                return false;
            });

            $utilitiesMenu.on("menuselect", function (e, ui) {
                $("#utilitiesMenuThemesFlyout li.selected-theme").removeClass("selected-theme");
                var theme = ui.item.attr("data-value");
                ui.item.addClass("selected-theme");
                editor.setTheme(theme);
                setCookie("editorTheme", theme, 365 * 10);
            });

            var $dropForm = $("#dropForm");
            var $fileInput = $("#fileInput");

            $fileInput.on("change", function (e) {
                var val = $(this).val();

                if (val != "") {
                    if (!isSarifFile(val)) {
                        alert("Only .sarif files are supported.");
                        $(this).val("");
                    }
                    else {
                        submitValidationRequest($(this)[0].files[0]);
                    }
                }
            });

            $dropForm.on("click", function (e) {
                $dropForm.blur();
                $fileInput[0].click();
            })
            .on("keypress", function (e) {
                if (e.key == "Enter" || e.key == " ") {
                    e.preventDefault();
                    e.stopPropagation();
                    $fileInput[0].click();
                }
            })
            .on("drag dragstart dragend dragover dragenter dragleave drop", function (e) {
                e.preventDefault();
                e.stopPropagation();
            })
            .on("dragover dragenter", function () {
                $dropForm.addClass("drop-area-active");
            })
            .on("dragleave dragend drop", function () {
                $dropForm.removeClass("drop-area-active");
            })
            .on("drop", function (e) {
                var file = e.originalEvent.dataTransfer.files[0];

                if (!isSarifFile(file.name)) {
                    alert("Only .sarif files are supported.");
                }
                else {
                    submitValidationRequest(file);
                }
            });
        });
    </script>
}