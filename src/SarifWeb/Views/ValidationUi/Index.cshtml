@{
    ViewBag.Title = "SARIF Validator";
}

<link href="~/Content/Home.css" rel="stylesheet" />
<link href="~/Scripts/jqueryui/jquery-ui.min.css" rel="stylesheet" />
<link href="~/Scripts/jqueryui/jquery-ui.structure.css" rel="stylesheet" />
<link href="~/Scripts/jqueryui/jquery-ui.theme.css" rel="stylesheet" />
<link href="~/Content/Validator.css" rel="stylesheet" />

<section id="dropSection" class="content-section gray-section">
    <div class="content-section-title">@ViewBag.Title</div>

    <div id="dropArea" class="drop-area">
        <div id="dropAreaText" class="drop-area-text">Drop your SARIF log file here to validate it</div>
    </div>
</section>

<section id="validatorSection" class="content-section gray-section">
    <div id="validatorContainer">
        <div id="results">
            <div id="rules">
                <select id="ruleList" name="ruleList">
                    <option value=""></option>
                </select>
            </div>
            <div id="ruleDescription"></div>
            <div id="resultsList"></div>
        </div>
        <div id="source">
            <div id="editorControls">
                <div id="leftSide">
                    <button id="downloadLog" disabled>
                        <img src="~/Images/download.png" />
                        <div>Download</div>
                    </button>
                </div>
                <div id="rightSide">
                    Theme:
                    <select id="themeList" disabled>
                        <optgroup label="Light">
                            <option value="ace/theme/chrome">Chrome</option>
                            <option value="ace/theme/clouds">Clouds</option>
                            <option value="ace/theme/crimson_editor">Crimson Editor</option>
                            <option value="ace/theme/dawn">Dawn</option>
                            <option value="ace/theme/dreamweaver">Dreamweaver</option>
                            <option value="ace/theme/eclipse">Eclipse</option>
                            <option value="ace/theme/github">GitHub</option>
                            <option value="ace/theme/iplastic">IPlastic</option>
                            <option value="ace/theme/solarized_light">Solarized Light</option>
                            <option value="ace/theme/textmate">TextMate</option>
                            <option value="ace/theme/tomorrow">Tomorrow</option>
                            <option value="ace/theme/xcode">XCode</option>
                            <option value="ace/theme/kuroir">Kuroir</option>
                            <option value="ace/theme/katzenmilch">KatzenMilch</option>
                            <option value="ace/theme/sqlserver" selected>SQL Server</option>
                        </optgroup>
                        <optgroup label="Dark">
                            <option value="ace/theme/ambiance">Ambiance</option>
                            <option value="ace/theme/chaos">Chaos</option>
                            <option value="ace/theme/clouds_midnight">Clouds Midnight</option>
                            <option value="ace/theme/dracula">Dracula</option>
                            <option value="ace/theme/cobalt">Cobalt</option>
                            <option value="ace/theme/gruvbox">Gruvbox</option>
                            <option value="ace/theme/gob">Green on Black</option>
                            <option value="ace/theme/idle_fingers">idle Fingers</option>
                            <option value="ace/theme/kr_theme">krTheme</option>
                            <option value="ace/theme/merbivore">Merbivore</option>
                            <option value="ace/theme/merbivore_soft">Merbivore Soft</option>
                            <option value="ace/theme/mono_industrial">Mono Industrial</option>
                            <option value="ace/theme/monokai">Monokai</option>
                            <option value="ace/theme/pastel_on_dark">Pastel on dark</option>
                            <option value="ace/theme/solarized_dark">Solarized Dark</option>
                            <option value="ace/theme/terminal">Terminal</option>
                            <option value="ace/theme/tomorrow_night">Tomorrow Night</option>
                            <option value="ace/theme/tomorrow_night_blue">Tomorrow Night Blue</option>
                            <option value="ace/theme/tomorrow_night_bright">Tomorrow Night Bright</option>
                            <option value="ace/theme/tomorrow_night_eighties">Tomorrow Night 80s</option>
                            <option value="ace/theme/twilight">Twilight</option>
                            <option value="ace/theme/vibrant_ink">Vibrant Ink</option>
                        </optgroup>
                    </select>
                </div>
            </div>
            <div id="editor"></div>
        </div>
    </div>
</section>

<a id="downloadLink" style="display: none;">Download</a>

@section Scripts {
    <script src="~/Scripts/ace/ace.js"></script>
    <script src="~/Scripts/jqueryui/jquery-ui.min.js"></script>
    <script src="~/Scripts/jquery.filedrop.js"></script>
    <script type="text/javascript">
        $(function () {
            var fileName = "";
            var editor = null;
            var ruleList = $("#ruleList").selectmenu();
            var downloadButton = $("#downloadLog").button();

            var theme = getCookie("editorTheme");
            theme = theme ? theme : "ace/theme/sqlserver";
            var themeList = $("#themeList").selectmenu().val(theme).selectmenu("refresh");

            //var ruleTemplate = `
            //        <div id="ruleHeader_{RULEID}" class="rule-header">
            //            <div class="rule-id">
            //                <div>{RULEID}</div>
            //                <div id="ruleCount_{RULEID}" class="ruleid-count-badge">0</div>
            //            </div>
            //            <div class="rule-desc">{DESCRIPTION}</div>
            //        </div>
            //        <div id="results_{RULEID}" class="rule-results-list"></div>
            //        `;
            var resultTemplate = `
                    <div class="rule-result" sourceline="{LINE}">
                        <div class="rule-result-line">Line {LINE}</div>
                        <div class="rule-result-snip">{SNIPPET}</div>
                    </div>
                    `;

            // Rules dictionary: key = rule ID, value = { description, results[] }
            var rulesDictionary = {};

            function addRule(ruleId, description) {
                rulesDictionary[ruleId] = {
                    description: description,
                    results: []
                };
            }

            function addResult(ruleId, line, snippet) {
                var html = resultTemplate.replace(/{LINE}/g, line)
                    .replace(/{SNIPPET}/g, snippet);
                rulesDictionary[ruleId].results.push({ html: html, line: line });
            }

            function processResults(sarif) {
                var sarifLog = JSON.parse(sarif);

                for (var i = 0; i < sarifLog.runs.length; i++) {
                    var run = sarifLog.runs[i];

                    if (run.resources && run.resources.rules) {
                        // Process rules
                        var rules = run.resources.rules;

                        for (var key in rules) {
                            var rule = rules[key];
                            var ruleId = rule.id;

                            if (!rulesDictionary[ruleId]) {
                                var description = rule.shortDescription ? rule.shortDescription.text : rule.fullDescription.text;
                                addRule(ruleId, description);
                            }
                        }

                        // Process results
                        for (var j = 0; j < run.results.length; j++) {
                            var result = run.results[j];

                            for (var k = 0; k < result.locations.length; k++) {
                                var startLine = result.locations[k].physicalLocation.region.startLine;
                                var snippet = editor.session.getLine(startLine - 1).trim();
                                addResult(result.ruleId, startLine, snippet);
                            }
                        }

                        // Now we know how many results we have for each rule, so populate the rules dropdown
                        var options = [];
                        for (var key in rulesDictionary) {
                            options.push("<option value='" + key + "'>" + key + " (" + rulesDictionary[key].results.length + ")</option>");
                        }

                        $(ruleList).empty();
                        $(ruleList).append(options.join("")).selectmenu("refresh").trigger("selectmenuchange");
                    }
                }
            }

            function saveTextAsFile() {
                var textToWrite = editor.getValue();
                var textFileAsBlob = new Blob([textToWrite], { type: "text/json" });

                var downloadLink = $("#downloadLink")[0];
                downloadLink.download = fileName;
                downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
                downloadLink.click();

                window.URL.revokeObjectURL(textFileAsBlob);
            }

            $(ruleList).on("selectmenuchange", function () {
                var ruleId = $(this).val();
                var rule = rulesDictionary[ruleId];
                var resultsList = $("#resultsList");
                $(resultsList).empty();

                rule.results.forEach(function (result) {
                    $(result.html).appendTo(resultsList);
                });

                $("#ruleDescription").text(rule.description);
            });

            $(themeList).on("selectmenuchange", function () {
                var theme = $(this).val();
                editor.setTheme(theme);
                setCookie("editorTheme", theme, 365 * 10);
            });

            $(downloadButton).on("click", function () {
                saveTextAsFile();
            });

            $(document).on("click", ".rule-result", function () {
                var line = $(this).attr("sourceline");
                editor.gotoLine(line, 0, true);
            });

            $('#dropArea').filedrop({
                fallback_dropzoneClick: false,
                url: '@Url.Action("ValidateFilesAsync")',
                allowedfileextensions: ['.sarif', '.json'],
                paramname: 'postedFiles',
                maxfiles: 1,
                dragOver: function () {
                    $('#dropArea').addClass('active-drop');
                },
                dragLeave: function () {
                    $('#dropArea').removeClass('active-drop');
                },
                drop: function (e) {
                    var file = e.originalEvent.dataTransfer.files[0];
                    var reader = new FileReader();
                    reader.onload = function () {
                        if (!editor) {
                            editor = ace.edit("editor", {
                                mode: "ace/mode/json",
                                theme: $(themeList).val(),
                                selectionStyle: "text",
                                showPrintMargin: false
                            });
                        }
                        editor.setValue(atob(reader.result.substring(reader.result.indexOf(',')+1)));
                        editor.selection.clearSelection();
                        $(downloadButton).button("enable");
                        $(themeList).selectmenu("enable");
                    };
                    reader.readAsDataURL(file);
                    fileName = file.name;
                    $('#dropArea').removeClass('active-drop');
                    $('#dropAreaText').removeClass('drop-area-text-complete');
                    $('#dropAreaText').addClass('drop-area-text-busy');
                    $('#dropAreaText').text('Validating file...');
                },
                uploadFinished: function (i, file, response, time) {
                    $('#uploadList').append('<li class="list-group-item">' + file.name + '</li>');
                    $('#responseMessage').text(response.Message);
                    processResults(response.LogContents);
                    $('#resultsSection').show();
                    $('#dropAreaText').removeClass('drop-area-text-busy');
                    $('#dropAreaText').addClass('drop-area-text-complete');
                    $('#dropAreaText').text('Validation complete!');
                }
            });
        });
    </script>
}